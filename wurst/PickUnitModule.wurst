package PickUnitModule
import ExternalDefines
import HashMap
import PlayerHelper
import Camera
import ProcessControl

var pk = new HashMap<unit, int>
public hashtable clk = InitHashtable()

function filter_pick() returns boolean
    return pk.has(GetTriggerUnit())

function pick()
    player pl = GetTriggerPlayer()
    int player_id = GetPlayerId(pl)
    int unit_index = pk.get(GetTriggerUnit())
    int times = LoadInteger(clk, player_id, unit_index)
    boolean choosed = LoadBoolean(clk, player_id, CAREERS_NUM + 1)
    if choosed
        return
    if times == 0
        FlushChildHashtable(clk, player_id)
        SaveInteger(clk, player_id, unit_index, 1)
    else if times == 1
        pl.pick(unit_index)

public function player.pick(int index)
    vec2 pos = BORN_RECT.getCenter()
    unit u = createUnit(this, PICK_UNITS[index], pos, angle(270))
    printTimed(GetPlayerName(this)+ "选择了" + CAREER_COLORS[index] +GetUnitName(u), 4)
    this..init_self(u, PICK_CAREERS[index])
        ..setCameraBoundsToRect(BORN_RECT)
        ..panCameraToTimed(BORN_RECT.getCenter(), 0)
        ..setCameraField(CAMERA_FIELD_FIELD_OF_VIEW, 95., 0)
        ..setCameraField(CAMERA_FIELD_TARGET_DISTANCE, 2500., 0)
        ..selectSingle(u)
        ..setName(this.getName() + "(" + GetUnitName(u) + ")")

    player_board.refresh_career(this.getId())
    FlushChildHashtable(clk, this.getId())
    SaveBoolean(clk, this.getId(), CAREERS_NUM + 1, true)

init
    group g = CreateGroup()
    g.enumUnitsInRect(PICK_RECT)
    int index = 0
    
    for i in g
        if index == CAREERS_NUM
            break
        pk.put(createUnit(Player(PLAYER_NEUTRAL_PASSIVE), PICK_UNITS[index], i.getPos()+vec2(16, 16), bj_UNIT_FACING.asAngleDegrees()), index)
        index ++
    g.destr()

    trigger tr = CreateTrigger()
    for i = 0 to PLAYER_NUM-1
        tr.registerPlayerUnitEvent(Player(i), EVENT_PLAYER_UNIT_SELECTED, null)
    
    tr..addCondition(Filter(function filter_pick))
    ..addAction(function pick)

    