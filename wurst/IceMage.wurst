package IceMage
import ExternalDefines
import HashMap
import TimerUtils

constant real g_fIceBarrierShieldHP = 750.0
constant int g_nIceBarrierAbiId = 'B001'
constant real g_fIceBarrierLastTime = 45

class IceBarrier
	static var mapInstance = new HashMap<unit, IceBarrier>
	unit m_u
	timer m_tPosUpdate
	timer m_tDestroy
	texttag m_tx
	real m_fShieldHP
	trigger m_trDmg
	real m_fRecovery

	construct (unit uTarget)
		m_u = uTarget
		m_tPosUpdate = CreateTimer()
		m_tDestroy = CreateTimer()
		m_fShieldHP = g_fIceBarrierShieldHP
		m_trDmg = CreateTrigger()
		m_fRecovery = 0.0
		m_tx = createTTEx(m_u.getPos3Zero(), m_fShieldHP.toString(), 9)
	
	ondestroy
		IceBarrier.mapInstance.remove(m_u)
		m_u.removeAbility(g_nIceBarrierAbiId)
		m_tPosUpdate.pause()
		m_tPosUpdate.destr()
		m_tDestroy.pause()
		m_tDestroy.destr()
		m_tx.destr()
		m_trDmg.disable()
		m_trDmg.destr()
		

	function start()
		if m_u.hasAbility(g_nIceBarrierAbiId)
			if _DEBUG
				print("ICEBARRIER COVER CHECK ERROR")
			return
		
		if _DEBUG
			print("icebarrier int:"+(this castTo int).toString())
			print("icebarrier unit instance:"+((this castTo int) castTo IceBarrier).m_u.getHandleId().toString())
			print("icebarrier destroy timer handle:"+m_tDestroy.getHandleId().toString())
			print("icebarrier trigger handle"+m_trDmg.getHandleId().toString())
		m_tPosUpdate.setData(this castTo int)
		m_tDestroy.setData(this castTo int)
		
		m_trDmg..registerUnitEvent(m_u, EVENT_UNIT_DAMAGED)
			..addAction(function IceBarrier.protect_act)
			..enable()

		m_tPosUpdate.startPeriodic(0.03, function IceBarrier.pos_update)
		m_tDestroy.startPeriodic(g_fIceBarrierLastTime, function IceBarrier.destr)
		

	function refresh()
		if m_tDestroy != null
			m_tDestroy.pause()
			m_tDestroy.destr()
			m_tDestroy = CreateTimer()
			m_fShieldHP = g_fIceBarrierShieldHP
			m_tx.setText(m_fShieldHP.toString(), 9)
			m_tDestroy.setData(this castTo int)
			m_tDestroy.startPeriodic(g_fIceBarrierLastTime, function IceBarrier.destr)
	
	static function protect_act()
		IceBarrier instance = IceBarrier.mapInstance.get(GetTriggerUnit())
		real fDmg = GetEventDamage()
		if fDmg <= 0
			return
		if fDmg < instance.m_fShieldHP
			instance.m_fRecovery = fDmg
			instance.m_fShieldHP -= fDmg
			instance.m_tx.setText(instance.m_fShieldHP.toString(), 9)
		else if instance.m_fShieldHP > 0
			instance.m_fRecovery = instance.m_fShieldHP
			instance.m_fShieldHP = 0.0
			instance.m_tDestroy.startPeriodic(0.0, function IceBarrier.destr)
			if _DEBUG
				print("Shield Break")
			else
				skip
		else
			return
		
		CreateTimer()..setData(instance castTo int)
			..startPeriodic(0, function IceBarrier.delay_recover)

	static function delay_recover()
		timer t = GetExpiredTimer()
		var instance = (t.getData()) castTo IceBarrier
		instance.m_u.setHP(instance.m_u.getHP() + instance.m_fRecovery)
		t.pause()
		t.destr()

	static function pos_update()
		IceBarrier instance = (GetExpiredTimer().getData()) castTo IceBarrier
		instance.m_tx.setPos(instance.m_u.getPos3Zero())


	static function delay_destr()
		CreateTimer()..setData(GetExpiredTimer().getData())
			..startPeriodic(0, function IceBarrier.destr)
	
	static function destr()
		if _DEBUG
			print("icebarrier destroying")
		destroy (GetExpiredTimer().getData() castTo IceBarrier)
		
	static function action()
		unit u = GetSpellTargetUnit()
		if _DEBUG
			print("SpellUnitHandle:"+u.getHandleId().toString())
		if IceBarrier.mapInstance.has(u)
			if _DEBUG
				print("icebarrier cover")
			IceBarrier instance = IceBarrier.mapInstance.get(u)
			instance.refresh()
		else
			if _DEBUG
				print("icebarrier act")
			var instance = new IceBarrier(u)
			IceBarrier.mapInstance.put(u, instance)
			instance.start()
		


init
	CreateTrigger()
		..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SPELL_EFFECT)
		..addCondition(Filter(()->GetSpellAbilityId()=='A008'))
		..addAction(function IceBarrier.action)
