package SkillHelper

import MathHelper
import Buffs
import TimerUtils
import EditorHelper
import BossHelper
import SoundHelper

public let FAKE_CASTER = 'ctfk'

class Rush
    static let default_effect = "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl"
    static let unit_id = 'rush'
    construct(unit u, angle ang, real speed, real dis, bool pause, string effect_path)
        this.u = u
        this.ang = ang
        this.speed = speed
        this.dis = dis
        this.pause = pause
        this.effect_path = effect_path
        rush()

    private function rush()
        if dis<speed or u == null
            return
        if pause
            u.pause()
        u.addAbility('Aeth')
        CreateTimer()..setData(this castTo int)
            ..startPeriodic(0.03, function Rush.rush_timer)
    
    private static function rush_timer()
        timer t = GetExpiredTimer()
        var data = t.getData() castTo Rush
        vec2 pos = data.u.getPos()
        pos = MathHelper.forward(pos, data.ang, data.speed)
        unit uExplorer = createUnit(data.u.getOwner(), Rush.unit_id, pos, data.ang)
        uExplorer.setTimedLife(0.3)

        if not IssueBuildOrderById(uExplorer, Rush.unit_id, pos.x, pos.y) or data.moved_dis >= data.dis
            if data.pause
                data.u.unpause()
            data.u.removeAbility('Aeth')
            destroy data
            t..pause()..destr()
            return
        data.u.setPos(pos)
        flashEffect(data.effect_path, pos)
        data.moved_dis += data.speed

    unit u
    angle ang
    real speed
    real dis
    bool pause
    real moved_dis = 0
    string effect_path = Rush.default_effect

class FanShaped
    
public class Invulnerability
    trigger tr
    real armor = 0
    unit u = null
    timer tm
    construct(unit u)
        print("protect")
        armor = u.getArmor()
        this.u = u
        u.setArmor(233.)
        tr = CreateTrigger()..registerUnitEvent(u, EVENT_UNIT_DAMAGED)
            ..addAction(()->BlzSetEventDamage(0))
        tm = getTimer()
        tm..setData(this castTo int)
        ..startPeriodic(0.1, function des_buf)

    static function des_buf()
        var obj = GetExpiredTimer().getData() castTo Invulnerability
        obj.u.remove_buff(BuffClearType.additions, BuffType.debuffs)
        obj.u.remove_buff(BuffClearType.additions, BuffType.buffs)

    ondestroy
        tr..disable()..destr()
        tm.release()
        u.setArmor(armor)


public class AutoTrace
    unit ut
    unit uc
    angle init_speed_ang
    SkillHelperCb cb
    int arg
    unit uf
    timer tm_f
    static let init_speed = 55.
    static let init_speed_deca = 1.25
    static let init_trace_speed = 0.
    static let trace_speed_inc = 2.5
    static let max_speed = 55
    real cur_ispd = init_speed
    real cur_tspd = init_trace_speed
    real ini_dec = init_speed_deca
    real tra_inc = trace_speed_inc
    construct(int effect_id, unit ut, unit uc, angle ang, SkillHelperCb cb, int arg)
        this.ut = ut
        this.uc = uc
        this.init_speed_ang = ang
        this.cb = cb
        this.arg = arg
        this.uf = createUnit(uc.getOwner(), effect_id, uc.getPos()+vec2(16,16), init_speed_ang)
        tm_f = getTimer()
        tm_f..setData(this castTo int)
            ..startPeriodic(0.05, function tm_cb)

    function set_speed(real is, real its, real isd, real tsi)
        cur_ispd = is
        cur_tspd = its
        ini_dec = isd
        tra_inc = tsi
    ondestroy
        tm_f.release()
        KillUnit(uf)

    private static function tm_cb()
        var obj = GetExpiredTimer().getData() castTo AutoTrace
        obj.main()

    private function main()
        if not ut.isAlive()
            ut = uc
            cur_tspd = 0
            if not ut.isAlive()
                destroy this
                
        vec2 curpos = uf.getPos()
        angle to_target = MathHelper.get_angle(curpos, ut.getPos())
        vec2 sucpos = MathHelper.forward(curpos, to_target, cur_tspd)
        if cur_tspd < max_speed
            cur_tspd += trace_speed_inc
        if cur_ispd > 0
            sucpos = MathHelper.forward(sucpos, init_speed_ang, cur_ispd)
            cur_ispd -= init_speed_deca
        angle face = MathHelper.get_angle(curpos, sucpos)
        uf..setFacing(face)..setXY(sucpos)
        if (sucpos - ut.getPos()).lengthSq() <= 56*56.
            if ut != uc
                cb.cb(arg)
            destroy this

public interface SkillHelperCb
    function cb(int _obj)

public class SkillHelper
    static function rush(unit u, angle ang, real dis, real speed, bool pauseUnit, string effect_path)
        new Rush(u, ang, speed, dis, pauseUnit, effect_path)

    static function flash()
        
    static function protect(unit u) returns Invulnerability
        return new Invulnerability(u)

    static function counter_spell(unit ucaster, unit utarget) returns bool
        if BossHelper.counter(utarget)
            real speed = 64 * 0.071 / 128
            real angle = 90
            createTTEx(ucaster.getPos3Zero() - vec3(245, 0, 0), "★反制成功★", 7, ucaster.getOwner().getColor().toColor().withAlpha(255))
                ..setPermanent(false)
                ..setFadepoint(2.)
                ..setLifespan(3.)
                ..setVelocity(speed * CosBJ(angle), speed * SinBJ(angle))
            SoundHelper.counter_spell()
            return true
        return false

    
    static function auto_trace_missile(int ef_id, unit utarget, unit ucaster, angle ang, SkillHelperCb cb, int arg)
        new AutoTrace(ef_id, utarget, ucaster, ang, cb, arg)

    static function auto_trace_missile_modify_speed(int ef_id, unit utarget, unit ucaster, angle ang, SkillHelperCb cb,
        int arg, real init_speed, real init_speed_deca, real init_trace_speed, real trace_speed_inc)
        var o = new AutoTrace(ef_id, utarget, ucaster, ang, cb, arg)
        o.set_speed(init_speed,init_speed_deca, init_trace_speed, trace_speed_inc)
        
    static function blink_forward(unit ucaster, angle ang, int dis) returns vec2
        vec2 pos = ucaster.getPos()
        ucaster.addAbility('Aeth')
        let each = 50
        for i = 1 to dis div each
            pos = MathHelper.forward(pos, ang, each.toReal())
            unit uExplorer = createUnit(ucaster.getOwner(), Rush.unit_id, pos, ang)
            uExplorer.setTimedLife(0.3)

            if not IssueBuildOrderById(uExplorer, Rush.unit_id, pos.x, pos.y)
                pos = MathHelper.forward(pos, ang, (-each).toReal())
                break
        ucaster.removeAbility('Aeth')
        return pos


    private construct()

    
@compiletime
function create_rush_explorer()
    var editor = new UnitDefinition(Rush.unit_id, 'hpea')
    editor..setNormalAbilities("Aeth,Aloc,Ahrp")
        ..setStructuresBuilt(Rush.unit_id.toRawCode())
        ..setCollisionSize(24.)
        ..setName("RUSH")
        ..setShadowImageUnit("")
        ..setArtSpecial("")
        ..setSpeedBase(0)
        ..setAttacksEnabled(0)
        ..setHitPointsMaximumBase(9999)
        ..setFoodCost(0)
        ..setUnitClassification("")
        ..setGoldCost(0)
        ..setLumberCost(0)
        ..setSightRadiusDay(0)
        ..setSightRadiusNight(0)
        ..setModelFile(".mdl")
    destroy editor

@compiletime
function create_ice_spirit_faker_caster()
    var ed = EditorHelper.create_caster_faker_unit(FAKE_CASTER, 1)
    destroy ed