package IceBarrier
import IceMage
import TimerUtils
import ExternalDefines
import HashMap
import TriggerHelper
import EditorHelper
import ProgressHelper
import Buffs

class Data
    construct (unit uTarget)
        m_u = uTarget
        m_tDestroy = CreateTimer()
        m_fShieldHP = IceBarrier.shield_hp
        m_trDmg = CreateTrigger()
        m_trDeath = CreateTrigger()
        m_tx = new ProgressBar(m_u, m_fShieldHP)
        m_tx.set_cur_value(m_fShieldHP)
    
    ondestroy
        m_u.remove_buff(IceBarrier.buff_id)
        m_tDestroy..pause()..destr()
        destroy m_tx
        m_trDmg..disable()..destr()
        m_trDeath..disable()..destr()
    
    unit m_u
    timer m_tDestroy
    ProgressBar m_tx
    real m_fShieldHP
    trigger m_trDmg
    trigger m_trDeath


public class IceBarrier extends IceMageSkill
    static constant int self_id = 'im0r'
    static constant real shield_hp = 750.0
    static constant int buff_id = 'im1r'
    static constant real last_time = 45
    static private var data_manager = new IterableMap<unit, Data>
    construct(unit u)
        super(u)
    
    ondestroy
        clear()
        destroy data_manager
    
    override function clear()
        for i in data_manager
            var dt = data_manager.get(i)
            if dt != null
                if not dt.m_u.remove_buff(buff_id)
                    destroy dt
                    data_manager.remove(dt.m_u)
   
    override function listen()
        m_tr_self..registerUnitEvent(m_self_unit, EVENT_UNIT_SPELL_EFFECT)
            ..addCondition(Filter(()->GetSpellAbilityId()==IceBarrier.self_id))
            ..addAction(function IceBarrier.cast)
            ..setData(this castTo int)
        
    static function cast()
        var obj = GetTriggeringTrigger().getData() castTo IceBarrier
        unit u = GetSpellTargetUnit()
        u.remove_buff(BuffClearType.additions, BuffType.debuffs)
        if u.hasAbility(IceBarrier.buff_id)
            obj.refresh(u)
        else
            obj.start(u)

    override function destroy_buff(unit u)
        var tmp = data_manager.get(u)
        if tmp != null
            destroy tmp
            data_manager.remove(u)
        

    function start(unit u)
        Data dt = new Data(u)
        data_manager.put(u, dt)
        if dt.m_u.hasAbility(IceBarrier.buff_id)
            if _DEBUG
                print("IceBarrier::COVER CHECK ERROR")
            return
        dt.m_u.add_buff(IceBarrier.buff_id, BuffClearType.stable, BuffType.buffs, this)

        dt.m_tDestroy..setData(dt castTo int)
            ..startPeriodic(IceBarrier.last_time, function IceBarrier.destr)

        dt.m_trDmg..registerUnitEvent(dt.m_u, EVENT_UNIT_DAMAGED)
            ..addAction(function IceBarrier.protect_act)
            ..setData(dt castTo int)
        
        dt.m_trDeath..registerUnitEvent(dt.m_u, EVENT_UNIT_DEATH)
            ..addAction(function IceBarrier.unit_death)
            ..setData(dt castTo int)

    function refresh(unit u)
        if not data_manager.has(u)
            if _DEBUG
                print("IceBarrier::DATA NOT FOUND")
            return
        
        Data dt = data_manager.get(u)
        
        if dt.m_tDestroy != null
            dt.m_tDestroy.pause()
            dt.m_fShieldHP = IceBarrier.shield_hp
            dt.m_tx.set_cur_value(dt.m_fShieldHP)
            dt.m_tDestroy.startPeriodic(IceBarrier.last_time, function IceBarrier.destr)
        
    static function unit_death()
        Data dt = GetTriggeringTrigger().getData() castTo Data
        if dt != null
            if not dt.m_u.remove_buff(buff_id)
                destroy dt
                data_manager.remove(dt.m_u)

    static function protect_act()
        Data dt = GetTriggeringTrigger().getData() castTo Data
        if not dt.m_u.can_add_buff()
            return
        real fDmg = GetEventDamage()
        
        if fDmg <= 0
            return
        

        real fFinalDmg = fDmg > dt.m_fShieldHP ? fDmg-dt.m_fShieldHP : 0
        BlzSetEventDamage(fFinalDmg)
        dt.m_fShieldHP -= fDmg

        if dt.m_fShieldHP <= 0
            if dt != null
                if not dt.m_u.remove_buff(buff_id)
                    destroy dt
                    data_manager.remove(dt.m_u)
        else
            dt.m_tx.set_cur_value(dt.m_fShieldHP)
    
    static function destr()
        Data dt = GetExpiredTimer().getData() castTo Data
        if dt != null
            if not dt.m_u.remove_buff(buff_id)
                destroy dt
                data_manager.remove(dt.m_u)

@compiletime
function create_ice_barrier()
    var editor = new AbilityDefinitionUnholyFrenzycreep(IceBarrier.self_id)
    editor..setAttackSpeedBonus(1, 0.)
        ..setDamageperSecond(1, 0.)
        ..setCastRange(1, 800)
        ..setManaCost(1, 45)
        ..setCooldown(1, 5)
        ..setButtonPositionNormalX(3)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("R")
        ..setTargetsAllowed(1, TYPE_ALLOWED_ALLY)
        ..setName("IceBarrier")
        ..setTooltipNormal(1,
            Color_Define.COLOR_ICEMAGE + "Ice Barrier" +
            Color_Define.COLOR_HOT_KEY + "(R)")
        ..setTooltipNormalExtended(1,
            Color_Define.COLOR_NORMAL + "↑给目标施加寒冰屏障，可以为目标吸收最大750点伤害。|n" +
            Color_Define.COLOR_LAST_TIME + "→持续45秒。|n" +
            Color_Define. COLOR_CAST_RANGE + "→施法距离：800|n" +
            Color_Define.COLOR_COOL_DOWN + "→CD:5s")
        ..setIconNormal("ReplaceableTextures\\CommandButtons\\BTNFrostArmor.blp")
        ..setBuffs(1, IceBarrier.buff_id.toRawCode())
        ..setDurationHero(1, 45)
        ..setDurationNormal(1, 45)
        
    destroy editor

@compiletime
function create_ice_barrier_buff()
    var editor = new BuffDefinition(IceBarrier.buff_id, 'Bdet')
    editor..setName(1, "Ice Barrier")
        ..setTooltipNormal(1, Color_Define.COLOR_ICEMAGE + "Ice Barrier")
        ..setTooltipNormalExtended(1, Color_Define.COLOR_NORMAL + "此单位被寒冰护盾庇护着。")
        ..setArtTarget(1, "imr.mdx")
        ..setTargetAttachmentPoint0(1, "chest")
        ..setIconNormal(1, "ReplaceableTextures\\CommandButtons\\BTNFrostArmor.blp")


    destroy editor