package IceBarrier
import IceMage
import TimerUtils
import ExternalDefines
import HashMap
import TriggerHelper
import EditorHelper
import BuffObjEditing

class Data
    construct (unit uTarget)
        m_u = uTarget
        m_tPosUpdate = CreateTimer()
        m_tDestroy = CreateTimer()
        m_fShieldHP = IceBarrier.shield_hp
        m_trDmg = CreateTrigger()
        m_trDeath = CreateTrigger()
        m_fRecovery = 0.0
        m_tx = createTTEx(m_u.getPos3Zero(), m_fShieldHP.toString(), 9)
    
    ondestroy
        m_u.remove_buff(IceBarrier.buff_id)
        m_tPosUpdate..pause()..destr()
        m_tDestroy..pause()..destr()
        m_tx.destr()
        m_trDmg..disable()..destr()
        m_trDeath..disable()..destr()
    
    unit m_u
    timer m_tPosUpdate
    timer m_tDestroy
    texttag m_tx
    real m_fShieldHP
    trigger m_trDmg
    real m_fRecovery
    trigger m_trDeath


public class IceBarrier extends IceMageSkill
    static constant int self_id = 'im0r'
    static constant real shield_hp = 750.0
    static constant int buff_id = 'im0b'
    static constant real last_time = 45
    static private var data_manager = new HashMap<unit, Data>
    construct(unit u)
        super(u)
        
   
    override function listen()
        m_tr_self..registerUnitEvent(m_self_unit, EVENT_UNIT_SPELL_EFFECT)
            ..addCondition(Filter(()->GetSpellAbilityId()==IceBarrier.self_id))
            ..addAction(function skill_act_forwarding)
        
    override function cast()
        unit u = GetSpellTargetUnit()
        if u.hasAbility(buff_id)
            refresh(u)
        else
            start(u)

    function start(unit u)
        Data dt = new Data(u)
        data_manager.put(u, dt)
        if dt.m_u.hasAbility(IceBarrier.buff_id)
            if _DEBUG
                print("IceBarrier::COVER CHECK ERROR")
            return
        dt.m_u.add_buff(IceBarrier.buff_id, BuffClearType.stable, BuffType.buffs)
        dt.m_tPosUpdate..setData(dt castTo int)
            ..startPeriodic(0.03, function IceBarrier.pos_update)

        dt.m_tDestroy..setData(dt castTo int)
            ..startPeriodic(IceBarrier.last_time, function IceBarrier.destr)

        dt.m_trDmg..registerUnitEvent(dt.m_u, EVENT_UNIT_DAMAGED)
            ..addAction(function IceBarrier.protect_act)
            ..setData(dt castTo int)
            ..enable()
        
        dt.m_trDeath..registerUnitEvent(dt.m_u, EVENT_UNIT_DEATH)
            ..addAction(function IceBarrier.unit_death)
            ..setData(dt castTo int)
            ..enable()

    function refresh(unit u)
        if not data_manager.has(u)
            if _DEBUG
                print("IceBarrier::DATA NOT FOUND")
            return
        
        Data dt = data_manager.get(u)
        
        if dt.m_tDestroy != null
            dt.m_tDestroy.pause()
            dt.m_fShieldHP = IceBarrier.shield_hp
            dt.m_tx.setText(dt.m_fShieldHP.toString(), 9)
            dt.m_tDestroy.startPeriodic(IceBarrier.last_time, function IceBarrier.destr)
        
    static function unit_death()
        Data dt = GetTriggeringTrigger().getData() castTo Data
        
        data_manager.remove(dt.m_u)
        destroy dt

    static function protect_act()
        Data dt = GetTriggeringTrigger().getData() castTo Data
        real fDmg = GetEventDamage()
        
        if fDmg <= 0
            return
        
        real fCurHp = dt.m_u.getHP()
        real fMaxHp = dt.m_u.getMaxHP()
        if fMaxHp <= fDmg
            return
        real fDeltaHp = fMaxHp - fCurHp
        dt.m_u.setHP(fMaxHp)

        dt.m_fRecovery = fDmg > dt.m_fShieldHP ? dt.m_fShieldHP : fDmg
        dt.m_fShieldHP -= fDmg
        dt.m_fRecovery -= fDeltaHp

        if dt.m_fShieldHP < 0
            dt.m_tDestroy.startPeriodic(0.0, function IceBarrier.destr)
        else
            dt.m_tx.setText(dt.m_fShieldHP.toString(), 9)

        CreateTimer()..setData(dt castTo int)
            ..startPeriodic(0, function IceBarrier.delay_recover)

    static function delay_recover()
        timer t = GetExpiredTimer()
        Data dt = (t.getData()) castTo Data

        dt.m_u.setHP(dt.m_u.getHP() + dt.m_fRecovery)
        t.pause()
        t.destr()

    static function pos_update()
        Data dt = (GetExpiredTimer().getData()) castTo Data
        dt.m_tx.setPos(dt.m_u.getPos3Zero())
    
    static function destr()
        Data dt = GetExpiredTimer().getData() castTo Data
        data_manager.remove(dt.m_u)
        destroy dt

@compiletime
function create_ice_barrier()
    var editor = EditorHelper.create_channel_template(IceBarrier.self_id, emSkillKey.R)
    editor..setCastRange(1, 1100)
        ..setManaCost(1, 45)
        ..setCooldown(1, 5)
        ..setButtonPositionNormalX(3)
        ..setButtonPositionNormalY(2)
        ..setHotkeyNormal("R")
        ..setTargetsAllowed(1, TYPE_ALLOWED_ALLY)
        ..setTargetType(1, emTargetType.Unit castTo int)
        ..setName("IceBarrier")
        ..setTooltipNormal(1,
            Color_Define.COLOR_ICEMAGE + "Ice Barrier" +
            Color_Define.COLOR_HOT_KEY + "(R)")
        ..setTooltipNormalExtended(1,
            Color_Define.COLOR_NORMAL + "给目标施加寒冰屏障，可以为目标吸收最大750点伤害。|n" +
            Color_Define.COLOR_LAST_TIME + "持续45秒。|n" +
            Color_Define.COLOR_COOL_DOWN + "CD:5s")
        ..setIconNormal("Ice Barrier.blp")
        ..setTargetAttachmentPoint("origin")
        ..setDurationHero(1, 45.)
        ..setDurationNormal(1, 45.) 
        
    destroy editor

@compiletime
function create_ice_barrier_buff()
    var editor = new BuffDefinition(IceBarrier.buff_id, 'BHwe')
    editor..setName(1, "Ice Barrier")
        ..setTooltipNormal(1, Color_Define.COLOR_ICEMAGE + "Ice Barrier")
        ..setTooltipNormalExtended(1, Color_Define.COLOR_ICEMAGE + "此单位被寒冰护盾庇护着。")
        ..setArtTarget(1, "Abilities\\Spells\\Undead\\FrostArmor\\FrostArmorTarget.mdl")
        ..setTargetAttachmentPoint0(1, "chest")

    destroy editor